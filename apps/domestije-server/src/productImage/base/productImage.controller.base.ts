/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductImageService } from "../productImage.service";
import { ProductImageCreateInput } from "./ProductImageCreateInput";
import { ProductImage } from "./ProductImage";
import { ProductImageFindManyArgs } from "./ProductImageFindManyArgs";
import { ProductImageWhereUniqueInput } from "./ProductImageWhereUniqueInput";
import { ProductImageUpdateInput } from "./ProductImageUpdateInput";

export class ProductImageControllerBase {
  constructor(protected readonly service: ProductImageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductImage })
  async createProductImage(
    @common.Body() data: ProductImageCreateInput
  ): Promise<ProductImage> {
    return await this.service.createProductImage({
      data: {
        ...data,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        imageUrl: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductImage] })
  @ApiNestedQuery(ProductImageFindManyArgs)
  async productImages(@common.Req() request: Request): Promise<ProductImage[]> {
    const args = plainToClass(ProductImageFindManyArgs, request.query);
    return this.service.productImages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        imageUrl: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async productImage(
    @common.Param() params: ProductImageWhereUniqueInput
  ): Promise<ProductImage | null> {
    const result = await this.service.productImage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        imageUrl: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProductImage(
    @common.Param() params: ProductImageWhereUniqueInput,
    @common.Body() data: ProductImageUpdateInput
  ): Promise<ProductImage | null> {
    try {
      return await this.service.updateProductImage({
        where: params,
        data: {
          ...data,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          imageUrl: true,

          product: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProductImage(
    @common.Param() params: ProductImageWhereUniqueInput
  ): Promise<ProductImage | null> {
    try {
      return await this.service.deleteProductImage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          imageUrl: true,

          product: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
