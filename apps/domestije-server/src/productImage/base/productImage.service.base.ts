/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProductImage as PrismaProductImage,
  Product as PrismaProduct,
} from "@prisma/client";

export class ProductImageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductImageCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productImage.count(args);
  }

  async productImages(
    args: Prisma.ProductImageFindManyArgs
  ): Promise<PrismaProductImage[]> {
    return this.prisma.productImage.findMany(args);
  }
  async productImage(
    args: Prisma.ProductImageFindUniqueArgs
  ): Promise<PrismaProductImage | null> {
    return this.prisma.productImage.findUnique(args);
  }
  async createProductImage(
    args: Prisma.ProductImageCreateArgs
  ): Promise<PrismaProductImage> {
    return this.prisma.productImage.create(args);
  }
  async updateProductImage(
    args: Prisma.ProductImageUpdateArgs
  ): Promise<PrismaProductImage> {
    return this.prisma.productImage.update(args);
  }
  async deleteProductImage(
    args: Prisma.ProductImageDeleteArgs
  ): Promise<PrismaProductImage> {
    return this.prisma.productImage.delete(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.productImage
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
