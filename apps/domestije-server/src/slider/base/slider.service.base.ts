/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Slider as PrismaSlider,
  Category as PrismaCategory,
  Product as PrismaProduct,
} from "@prisma/client";

export class SliderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SliderCountArgs, "select">): Promise<number> {
    return this.prisma.slider.count(args);
  }

  async sliders(args: Prisma.SliderFindManyArgs): Promise<PrismaSlider[]> {
    return this.prisma.slider.findMany(args);
  }
  async slider(
    args: Prisma.SliderFindUniqueArgs
  ): Promise<PrismaSlider | null> {
    return this.prisma.slider.findUnique(args);
  }
  async createSlider(args: Prisma.SliderCreateArgs): Promise<PrismaSlider> {
    return this.prisma.slider.create(args);
  }
  async updateSlider(args: Prisma.SliderUpdateArgs): Promise<PrismaSlider> {
    return this.prisma.slider.update(args);
  }
  async deleteSlider(args: Prisma.SliderDeleteArgs): Promise<PrismaSlider> {
    return this.prisma.slider.delete(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.slider
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.slider
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
