/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SliderService } from "../slider.service";
import { SliderCreateInput } from "./SliderCreateInput";
import { Slider } from "./Slider";
import { SliderFindManyArgs } from "./SliderFindManyArgs";
import { SliderWhereUniqueInput } from "./SliderWhereUniqueInput";
import { SliderUpdateInput } from "./SliderUpdateInput";

export class SliderControllerBase {
  constructor(protected readonly service: SliderService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Slider })
  async createSlider(@common.Body() data: SliderCreateInput): Promise<Slider> {
    return await this.service.createSlider({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,

        product: data.product
          ? {
              connect: data.product,
            }
          : undefined,
      },
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        imageUrl: true,
        linkType: true,

        product: {
          select: {
            id: true,
          },
        },

        subtitleEn: true,
        subtitleRs: true,
        subtitleRu: true,
        titleEn: true,
        titleRs: true,
        titleRu: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Slider] })
  @ApiNestedQuery(SliderFindManyArgs)
  async sliders(@common.Req() request: Request): Promise<Slider[]> {
    const args = plainToClass(SliderFindManyArgs, request.query);
    return this.service.sliders({
      ...args,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        imageUrl: true,
        linkType: true,

        product: {
          select: {
            id: true,
          },
        },

        subtitleEn: true,
        subtitleRs: true,
        subtitleRu: true,
        titleEn: true,
        titleRs: true,
        titleRu: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Slider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async slider(
    @common.Param() params: SliderWhereUniqueInput
  ): Promise<Slider | null> {
    const result = await this.service.slider({
      where: params,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        imageUrl: true,
        linkType: true,

        product: {
          select: {
            id: true,
          },
        },

        subtitleEn: true,
        subtitleRs: true,
        subtitleRu: true,
        titleEn: true,
        titleRs: true,
        titleRu: true,
        updatedAt: true,
        videoUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Slider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSlider(
    @common.Param() params: SliderWhereUniqueInput,
    @common.Body() data: SliderUpdateInput
  ): Promise<Slider | null> {
    try {
      return await this.service.updateSlider({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,

          product: data.product
            ? {
                connect: data.product,
              }
            : undefined,
        },
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          imageUrl: true,
          linkType: true,

          product: {
            select: {
              id: true,
            },
          },

          subtitleEn: true,
          subtitleRs: true,
          subtitleRu: true,
          titleEn: true,
          titleRs: true,
          titleRu: true,
          updatedAt: true,
          videoUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Slider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSlider(
    @common.Param() params: SliderWhereUniqueInput
  ): Promise<Slider | null> {
    try {
      return await this.service.deleteSlider({
        where: params,
        select: {
          category: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          imageUrl: true,
          linkType: true,

          product: {
            select: {
              id: true,
            },
          },

          subtitleEn: true,
          subtitleRs: true,
          subtitleRu: true,
          titleEn: true,
          titleRs: true,
          titleRu: true,
          updatedAt: true,
          videoUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
