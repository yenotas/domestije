/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PromotionService } from "../promotion.service";
import { PromotionCreateInput } from "./PromotionCreateInput";
import { Promotion } from "./Promotion";
import { PromotionFindManyArgs } from "./PromotionFindManyArgs";
import { PromotionWhereUniqueInput } from "./PromotionWhereUniqueInput";
import { PromotionUpdateInput } from "./PromotionUpdateInput";
import { CategoryFindManyArgs } from "../../category/base/CategoryFindManyArgs";
import { Category } from "../../category/base/Category";
import { CategoryWhereUniqueInput } from "../../category/base/CategoryWhereUniqueInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";

export class PromotionControllerBase {
  constructor(protected readonly service: PromotionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Promotion })
  async createPromotion(
    @common.Body() data: PromotionCreateInput
  ): Promise<Promotion> {
    return await this.service.createPromotion({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        discountPercent: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Promotion] })
  @ApiNestedQuery(PromotionFindManyArgs)
  async promotions(@common.Req() request: Request): Promise<Promotion[]> {
    const args = plainToClass(PromotionFindManyArgs, request.query);
    return this.service.promotions({
      ...args,
      select: {
        createdAt: true,
        discountPercent: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Promotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async promotion(
    @common.Param() params: PromotionWhereUniqueInput
  ): Promise<Promotion | null> {
    const result = await this.service.promotion({
      where: params,
      select: {
        createdAt: true,
        discountPercent: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Promotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePromotion(
    @common.Param() params: PromotionWhereUniqueInput,
    @common.Body() data: PromotionUpdateInput
  ): Promise<Promotion | null> {
    try {
      return await this.service.updatePromotion({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          discountPercent: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Promotion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePromotion(
    @common.Param() params: PromotionWhereUniqueInput
  ): Promise<Promotion | null> {
    try {
      return await this.service.deletePromotion({
        where: params,
        select: {
          createdAt: true,
          discountPercent: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/categories")
  @ApiNestedQuery(CategoryFindManyArgs)
  async findCategories(
    @common.Req() request: Request,
    @common.Param() params: PromotionWhereUniqueInput
  ): Promise<Category[]> {
    const query = plainToClass(CategoryFindManyArgs, request.query);
    const results = await this.service.findCategories(params.id, {
      ...query,
      select: {
        createdAt: true,
        descriptionEn: true,
        descriptionRs: true,
        descriptionRu: true,
        id: true,
        parent: true,

        promotion: {
          select: {
            id: true,
          },
        },

        titleEn: true,
        titleRs: true,
        titleRu: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/categories")
  async connectCategories(
    @common.Param() params: PromotionWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categories: {
        connect: body,
      },
    };
    await this.service.updatePromotion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/categories")
  async updateCategories(
    @common.Param() params: PromotionWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categories: {
        set: body,
      },
    };
    await this.service.updatePromotion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/categories")
  async disconnectCategories(
    @common.Param() params: PromotionWhereUniqueInput,
    @common.Body() body: CategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      categories: {
        disconnect: body,
      },
    };
    await this.service.updatePromotion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/products")
  @ApiNestedQuery(ProductFindManyArgs)
  async findProducts(
    @common.Req() request: Request,
    @common.Param() params: PromotionWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProducts(params.id, {
      ...query,
      select: {
        createdAt: true,
        descriptionEn: true,
        descriptionRs: true,
        descriptionRu: true,
        id: true,
        isActive: true,
        price: true,
        sku: true,
        titleEn: true,
        titleRs: true,
        titleRu: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/products")
  async connectProducts(
    @common.Param() params: PromotionWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        connect: body,
      },
    };
    await this.service.updatePromotion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/products")
  async updateProducts(
    @common.Param() params: PromotionWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        set: body,
      },
    };
    await this.service.updatePromotion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/products")
  async disconnectProducts(
    @common.Param() params: PromotionWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        disconnect: body,
      },
    };
    await this.service.updatePromotion({
      where: params,
      data,
      select: { id: true },
    });
  }
}
